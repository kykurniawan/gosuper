// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/rabbitmq/amqp091-go"
	"gorm.io/gorm"
	"gosuper/app/http/controllers"
	"gosuper/app/libs/queue"
	"gosuper/app/repositories"
	"gosuper/app/services"
)

// Injectors from wire.go:

func InitializeApp(db *gorm.DB, amqp *amqp091.Connection) *App {
	app := NewApp(db, amqp)
	return app
}

func InitializeUserRepository(db *gorm.DB) *repositories.UserRepository {
	userRepository := repositories.NewUserRepository(db)
	return userRepository
}

func InitializeRefreshTokenRepository(db *gorm.DB) *repositories.RefreshTokenRepository {
	refreshTokenRepository := repositories.NewRefreshTokenRepository(db)
	return refreshTokenRepository
}

func InitializeUserService(db *gorm.DB) *services.UserService {
	userRepository := InitializeUserRepository(db)
	userService := services.NewUserService(userRepository)
	return userService
}

func InitializeAuthService(db *gorm.DB, amqp *amqp091.Connection) *services.AuthService {
	userService := InitializeUserService(db)
	otpService := InitializeOtpService(db)
	mailService := InitializeMailService()
	refreshTokenRepository := InitializeRefreshTokenRepository(db)
	queue := InitializeQueue(amqp)
	authService := services.NewAuthService(userService, otpService, mailService, refreshTokenRepository, queue)
	return authService
}

func InitializeAuthController(authService *services.AuthService) *controllers.AuthController {
	authController := controllers.NewAuthController(authService)
	return authController
}

func InitializeUserController(userService *services.UserService) *controllers.UserController {
	userController := controllers.NewUserController(userService)
	return userController
}

func InitializeOtpRepository(db *gorm.DB) *repositories.OtpRepository {
	otpRepository := repositories.NewOtpRepository(db)
	return otpRepository
}

func InitializeOtpService(db *gorm.DB) *services.OtpService {
	otpRepository := InitializeOtpRepository(db)
	otpService := services.NewOtpService(otpRepository)
	return otpService
}

func InitializeMailService() *services.MailService {
	mailService := services.NewMailService()
	return mailService
}

func InitializeQueue(amqp *amqp091.Connection) *queue.Queue {
	queueQueue := queue.NewQueue(amqp)
	return queueQueue
}
